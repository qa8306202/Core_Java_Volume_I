1. 类、超类和子类
1.1.定义子类
继承类Employee 类来定义Manager类的格式，关键字extends表示继承。
public class Manage extends Employee
{
    private double bonus;

    public void setBonus(double bonus)
    {
        this.bonus = bonus
    }
}
1.1.1. Java和C++定义继承类的方法十分相似，Java使用extends而C++使用冒号（：），另外java中都是共有继承，但是C++中有私有、保护继承。
1.1.2. 这里Employee 是父类parent class（超类super class、基类base class），Manage是子类subclass（派生类derived class）。注意，子类比超类拥有更加丰富的功能。
1.1.3. 在通过扩展超类定义子类的时候，仅需要指出子类与超类的不同之处，因此在设计类的时候，应该讲通用的方法放在超类中，而将具有特殊用途的方法放在子类中。

1.2 覆盖方法
    超类中的有些方法对子类并不一定适用。比如Manager 类中的getSalary方法应该返回薪水和奖金的总和。为此，需要一个新的方法来覆盖（override）超类中的方法。
    public double getSalary()
    {
        return salary + bonus; // wont work
    }

    上面这个方法是么有办法工作的，虽然Manager对象都拥有一个名为salary的域，但在manager类的getSalary方法并不能直接地访问salary域。只有Employee类的方法才能够访问私有部分。如果Manager类的方法一定要访问私有域，就必须借助公有接口，Employee类中的公有方法getSalary正是这样的一个接口：

    public double getSalary（）
    {
        double baseSalary = getSalary(); // still wont work，this is a recurision.
        return baseSalary + bonus;
    }

    如果想要调用超类Employee 中的方法getSalary方法，而不是当前类的这个方法。为此，可以使用特定关键字super解决这个问题：
    public double getSalary（）
    {
        double baseSalary = super.getSalary(); // this is right
        return baseSalary + bonus;
    }

    关于super,在C++中则用::表示，即换成Employee::getSalary。super其实是指示编译器调用超类方法的特殊关键字，和this还是不同的。

1.3 子类构造器
    public Manager(String name, double salary, int year, int month, int day)
    {
        super(name, salary, year, month, day);  // this super is different from the beyond one, which means call superclass builder
        bonus = 0;
    }




