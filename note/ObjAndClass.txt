1.封装需要的内容：
    一个私有的数据域
    一个公有的域访问器方法
    一个公有的域更改器方法
2.注意不要编写返回引用可变对象的访问器方法。什么是可变对象？就是有更改器方法的类的实例对象，就是可变对象。例如Date类的对象。
3.私有方法：当这个（私有）方法不被使用时候，可以随时删除，但是如果是公有方法，则可能被其他的代码依赖，不能随便删除。
4.final实例域：可以将实例域定义为final，但必须确保构建一个构造器执行后，这个域的值被设置，并且在后面的操作中，不能够再对他进行修改。
    final一般修饰不可变的类，例如String。而对于StringBuilder属于可变的类，如果使用final会造成混乱。


4.4静态域和静态方法
1.静态域（类域）
    如果将域定义为static，每个类中只有一个这样的域。而每一个对象对于所有的实例域却都有自己的一份拷贝。
    例如，存在一个如下类，每个实例化的对象都有一个自己的id域，但这个类的所有实例将共享一个nextId域。即使没有一个对象，nextId也存在。它属于类，而不属于任何独立的对象。
    Class Employee
    {
        private static int nextId = 1;
        private int id;
        public void setId()
        {
            id = nextId;
            nextId++;
        }
    }

2.静态常量：静态变量用的比较少，但静态常量却用的比较多。例如Math.PI,System.out  这些都是公有常量（相应的，还是将实例域设计为私有比较好）。
3.静态方法：是一种不能面向对象实施操作的方法。例如Math.pow  这个方法不使用任何Math对象。换句话说，没有隐式的参数。他虽然不可以方法对象的实例域，但是可以访问自身类的静态域。
    使用静态方法的两种情况：
        一个方法不需要访问对象状态，其所需参数都是通过显式参数提供，例如Math.pow
        一个方法只需要访问类的静态域

    static关键字：在C中意义表示变量一直存在，后来表示不能被其他文件方法的全局变量和函数。在Java和CPP中的解释为：属于类且不属于类对象的变量和函数。

    静态方法还可以用于静态工厂方法来构造对象，类似于LocalDate.of和LocalDate.of。
        在LocalDate中构造方法是私有方法：
            private LocalDate(int year, int month, int dayOfMonth) {
                this.year = year;
                this.month = (short) month;
                this.day = (short) dayOfMonth;
            }
        我们使用静态工厂方法来构造对象：
            public static LocalDate of(int year, int month, int dayOfMonth) {
                    YEAR.checkValidValue(year);
                    MONTH_OF_YEAR.checkValidValue(month);
                    DAY_OF_MONTH.checkValidValue(dayOfMonth);
                    return create(year, month, dayOfMonth);
            }

            private static LocalDate create(int year, int month, int dayOfMonth) {
                //先对输入的年月日做合法性判断，是不是闰年，有没有31号等。
                return new LocalDate(year, month, dayOfMonth);  //最后在这里才执行构造函数
            }


4.5 方法参数
将参数传递给方法（或函数）的一些专业术语：按值调用（call by value）、按引用调用（call by reference）、按名调用（call by name）。
Java中总是采用按值调用。也就是说方法得到的是所有参数值的一个拷贝，特别是方法不能修改传递给他的任何参数变量的内容。

一个方法虽然不可能改变一个基本数据类型的参数。而对象引用作为参数就不同了，可以很容易地利用下面这个方法实现将一个各院的薪金提高两倍的操作。
    e.g.[ObjAndClass_02 tripleSalary方法]
                harry = new Employee(...);
                tripleSalary(harry);
     这时，具体执行过程为：y被初始化为Harry值的拷贝，这里是一个对象的引用。（注：变量的值是一个对象的引用，也就是一个指针，也就是一个地址）
                        raiSalary方法应用于这个对象的引用。x和harry同时引用的那个Employee对象的薪资提高了200%
                        方法结束后，参数变量y不再使用。当然，对象变量harry继续引用那个薪资增至3倍的雇员对象。
Java中对象引用是按值传递的。java中方法参数的使用情况：
    一个方法不能修改一个基本数据类型的参数（即整数型或布尔型）
    一个方法可以改变一个对象参数的状态
    一个方法不能让对象参数引用一个新的对象


4.6对象构造
1.重载
    如果多个方法（比如，StringBuilder构造器方法）有相同的名字，不同的参数，便产生了重载。Java允许重载任何方法，而不只是构造器方法。因此，要完整地描述一个方法，需要指出方法名以及参数类型。这叫做方法的签名（signature）。例如，String类中有4
    个称为indexOf的公有方法。他们的签名是：
        indexOf(int);
        indexOf(int,int);
        indexOf(String);
        indexOf(String,int);
    返回类型不是方法签名的一部分。也就是说，不能有两个名字相同，参数类型也相同却返回不同类型值的方法。

2.默认域初始化
    如果在构造器中，没有显式递给域赋初值，那么就会被自动地赋为默认值：数值0，布尔值false，对象引用null。但是局部变量必须明确。

3.无参数的构造器
    很多类都包含一个无参数的构造函数，对象由无参数构造函数创建时，其状态会设置为适当的默认值。如果在编写一个类时没有编写构造器，那么系统就会默认提供一个无参数的构造器。这个构造器将所有实例域设置为默认值。但是如果类提供了构造方法，却没有提供无参数的构造器，则在构造对象时如果没有提供参数就会被视为不合法。
    public ClassName(){} //表示所有域被赋予默认值。

4.显式域初始化
    可以在类定义中，直接将一个值赋给任何域。这样在执行构造器之前，先执行赋值操作。另外，初始值不一定是常量值，可以调用方法对域进行初始化。
    e.g.
    class Employ
    {
        private static int nextId;
        private int id = assignId();
        ...
        private static int assignId(){
            int r = nextId;
            nextId++;
            return r;
        }
    }

5.参数名
我们使用this.来访问实例域，而参数名与实例域名字相同。
    public Employ(String name,double salary){
        this.name = name;
        this.salary = salary;
    }

6.调用另外一个构造器：一个构造函数开头（第一个语句），使用this(param1,param2,...);这个构造函数将调用另一个构造器。

7.初始化模块
    Java中存在三种初始化数据域的机制：
        1）在构造器中设置值
        2）在声明中赋值
        3）初始化块（initialization block）：在一个类的声明中，可以包含多个代码块，只要构造类的对象，这些块就会被执行。
    调用构造器的具体处理步骤：
        1）所有数据域被初始化为默认值
        2）按照在类声明中出现的次序，依次执行所有域初始化语句和初始化块
        3）如果构造器第一行调用了第二个构造器，则执行第二个构造器主体
        4）执行这个构造器主体

8.对象析构和finalize方法
    Java有自动的垃圾回收器，因此不需要析构器来人工回收内存。但是对于其他的资源，比如文件、句柄，可以使用finalize方法回收短缺的资源（但不推荐）。
    推荐使用方法Runtime.addShutdownHook添加“关闭钩”


4.7 包
使用包的主要原因是确保类名的唯一性。为了保证包名的绝对唯一性，Sun公司建议将公司的因特网域名以逆序的形式作为包名，并且对于不同的项目使用不同的子包。从编译器的角度来看，嵌套的包之间没有任何关系。例如,java.util包和java.util.jar包毫无关系。每一都拥有独立的集合。

1.类的导入
一个类可以使用所属包中的所有类，以及其他包中的公有类（public class）。我们有两种方法访问另一个包中的公有类。1）是在每个类名钱添加完整的包名。2）是使用import语句。

2.静态导入
import语句不仅可以导入类，还可以导入静态方法和静态域

3.将类放入包中
想要将一个类放入包中，就必须将包的名字放在源文件的开头，包中定义类的代码之前。如果没有在源文件中防止package语句，这个源文件中的类就被放置在一个默认包（default package）中。
编译器在编译源文件的时候是不检查目录结构的。例如有一个源文件开头有下列语句：
    package com.mycompany;
    即使这个源文件没有在子目录mycompany下，也可进行编译。如果他不依赖于其他包，就不会出现编译错误。但是，最终的程序将无法运行，除非先将所有类文件移到正确的位置上，如果包与目录不匹配，虚拟机就找不到类。

4.包作用域
public可以被任意的类使用，private只能被定义他们的类使用。如果没有指定public或private，这个部分（类、方法或变量）可以被同一个包中的所有方法使用。

5.类路径
类不仅可以存储在文件系统的子目录中（类的路径必须与包名匹配），类也可以存储在JAR（java归档）文件中。JAR文件使用ZIP格式组织文件和子目录。可以使用所有ZIP实用程序查看内部的.jar文件。
为了使类能够被多个程序共享，需要做到下面几点：
    1）吧类放到一个目录中，例如/home/user/classdir。这个目录必须是包树状结构的基目录。如果希望将com.company.Employee类添加到其中。这个Employee.class类文件就必须位于目录/home/user/classdir/com/compan中
    2）将JAR文件放在一个目录中，例如：/home/user/archives
    3）设置类路径（class path）。类路径是包含类文件的路径的集合。在UNIX环境中，类路径中不同的项目采用冒号（:）分隔：
    /home/user/classdir:.:/home/user/archives.jar
    而在Windows环境中，则以分号（；）分隔:
    c:\classdir;.;c:\archive\archive.jar;c:\home\user\archives\*

6.设置类路径
    最好采用-classpath(或-cp)选项指定类路径

4.9文档标注
    每个/**  */文档注释在标记之后紧跟着自由格式文本（free-form text）。可以使用HTML修饰符。标记由@开始。









