6 接口、lambda表达式与内部类
6.1 接口
在java中，接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。“如果类遵循某个特定接口，那么履行这项服务”。
以Array类中的sort方法承诺可以对对象数组进行排序，但要求满足“对象所属的类必须实现了Comparable接口”，以下是Comparable接口代码：
    public interface Comparable<T>{
        int compareTo(T other);  // parameter has type T, compareTo就是public
    }

接口中的所有方法自动地属于public。因此，在接口中声明方法时，不必提供关键字public。另外一个接口可能包含多个方法，在接口中还可以定义常量，但接口绝不能含有实例域。提供实例域和方法实现的任务应该由实现接口的那个类来完成。
因此，可以将接口看成是没有实例域的抽象类。但这两个概念还是有一定区别的
为了让类实现一个接口，通常需要下面两个步骤：
    1）将类声明为实现给定的接口。
    2）对接口中的所有方法进行定义。
    将类声明为实现某个接口，需要使用关键字implements:
        class Employee implements Comparable
在接口声明中，不必将方法声明为public， 但在实现接口时，必须吧方法声明为public，否则编译器将认为这个方法的访问属性是包可见性，即类的默认访问属性，之后编译器就会给出试图提供更严格的访问权限的警告信息。
我们已经知道，要让一个类使用排序服务必须让他实现compareTo方法。但是为什么不能在Employee类直接提供一个compareTo方法，而必须实现Comparable接口呢?
主要原因是在于java是一种强类型（strongly typed）语言。在调用方法的时候，编译器会检查这个方法是否存在。