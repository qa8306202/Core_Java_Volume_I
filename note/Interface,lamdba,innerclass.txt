6 接口、lambda表达式与内部类
1 接口
1.1 接口概念
在java中，接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。“如果类遵循某个特定接口，那么履行这项服务”。
以Array类中的sort方法承诺可以对对象数组进行排序，但要求满足“对象所属的类必须实现了Comparable接口”，以下是Comparable接口代码：
    public interface Comparable<T>{
        int compareTo(T other);  // parameter has type T, compareTo就是public
    }

接口中的所有方法自动地属于public。因此，在接口中声明方法时，不必提供关键字public。另外一个接口可能包含多个方法，在接口中还可以定义常量，但接口绝不能含有实例域。提供实例域和方法实现的任务应该由实现接口的那个类来完成。
因此，可以将接口看成是没有实例域的抽象类。但这两个概念还是有一定区别的
为了让类实现一个接口，通常需要下面两个步骤：
    1）将类声明为实现给定的接口。
    2）对接口中的所有方法进行定义。
    将类声明为实现某个接口，需要使用关键字implements:
        class Employee implements Comparable
在接口声明中，不必将方法声明为public， 但在实现接口时，必须吧方法声明为public，否则编译器将认为这个方法的访问属性是包可见性，即类的默认访问属性，之后编译器就会给出试图提供更严格的访问权限的警告信息。
我们已经知道，要让一个类使用排序服务必须让他实现compareTo方法。但是为什么不能在Employee类直接提供一个compareTo方法，而必须实现Comparable接口呢?
主要原因是在于java是一种强类型（strongly typed）语言。在调用方法的时候，编译器会检查这个方法是否存在。在sort方法中可能存在下面这样的语句：
    if(a[i].compareTo(a[j] > 0)){
        // rearrange a[i] and a[j]
        ...
    }
    为此，编译器必须要确认a[i]一定有compareTo方法。如果a是一个Comparable对象的数组，就可以确保拥有compareTo方法，因此每个市县Comparable接口的类都必须提供这个方法的定义。

1.2接口的特性
接口不是类，尤其不能使用new运算符实例化一个接口：
    x = new Comparable(...); //ERROR
然而，尽管不能构造接口的对象，却能声明接口的变量：
    Comparable x; //OK
接口变量必须引用实现了接口的类对象：
    x = new Employee(...); //OK，provided Employee implements Comparable
接下来，如同使用instanceof 检测一个对象是否属于某个特定类一样，也可以使用instance检查一个对象是否实现了某个特定的接口：
    if(anObj instanceof Comparable){...}

也可以建立类的继承关系一样，接口也可以被扩展。另外虽然接口不能包含实例域或静态方法，但却可以包含常量。例如：
    public interface Moveable{
        void move(double x, double y);
    }

    public interface Powered extends Moveable{
        double milesPerGallon();
        double SPEED_LIMIT = 95; // a public static final constant
    }
    与接口中的方法都自动地被设置为public一样，接口中的域将被自动的设置为public static final。
尽管每个类只能拥有一个超类，但却可以实现多个接口。这就为定义类的行为提供了极大的灵活性。例如：
    class Employee implements Cloneable, Comparable

1.3 接口与抽象类
java不允许一个类有多个超类，即不支持多重继承（multiple inheritance）。

1.4 静态方法
通常都是将静态方法放在伴随类中。在标准库中，会看到成对出现的接口和实用工具类。如Collection/Collections或Path/Paths

1.5 默认方法
可以为接口方法提供一个默认实现。必须使用default 修饰符标记这样一个方法。
    public interface Comparable<T>{
        default int compareTo(T other){return 0;}
            //By default, all elements are the same
    }
默认方法会在实现类中覆盖掉，用处在于默认设置成什么也不做，这样可以让实现这个接口的程序员只需要为他们真正关心的事件覆盖相应的方法。
默认方法的一个重要用法是“接口演化”（interface evolution） 。举例说明：
假如你很久以前提供了一个这样的类：
    public class Bag implements Collection
后来，javaSE 中又为这个接口Collection增加了一个stream方法。如果这个stream方法不是一个默认方法，那么Bag类将不能编译，因为它没有实现这个新方法。
因为，为接口增加一个非默认方法不能保证“源代码兼容”（source compatible）。不过，如果没有重新编译这个类，而只是使用之前的JAR包，这个类还是可以正常加载，尽管没有这个新方法。（为接口增加方法可以保证“二进制兼容”）。不过，如果程序在一个Bag实例上调用stream方法，就会出现一个AbstractMethodError.
将方法实现为一个默认方法就可以解决这两个问题。

1.6 解决默认方法冲突
如果先在一个接口将一个方法定义为默认方法，然后又在超类或另外一个接口中定义了同样的方法，这样冲突的情况下，Java规则如下：
    1）超类优先。如果超类提供了一个具体方法，同名而且有相同参数类型的默认方法会被忽略。
    2）接口冲突。如果一个超接口提供了一个默认方法，另一个接口提供了一个同名而且参数类型相同的方法，必须覆盖这个方法来解决冲突。

2 接口示例
2.1接口与回调
回调（callback）是一种常见的设计模式。在java.swing包中有个Timer类，可以使用它在到达给定时间间隔内发出通告。这时采取相应的动作（即回调）。
在java标准库中的类采用的是面向对象的方法。它将某个类的对象传递给定时器，然后，定时器调用这个对象的方法。由于对象可以携带一些附加的信息，所以传递一个对象比传递一个函数要灵活的多。
当然，定时器需要知道调用哪个方法，并要求传递的对象所属的类实现了java.awt.event包的ActionListener接口。下面是这个接口：
    public interface ActionListener{
        void actionPerformed(ActionEvent event);
    }
    当到达指定的时间间隔，定时器就调用actionPerformed方法。(所以回调对象要实现ActionListener这个接口)

2.2comparator接口
Arrays.sort方法有两个版本，分别使用了comparable接口和comparator接口。
comparator是在comparable已经被用过后，又想添加的一种比较方法的接口，我感觉是官服和私服的区别吧~

2.3对象克隆
copy:两个变量指向同一个对象地址
clone:两个变量指向不同对象的地址，但是这两个对象的域是一样的。
Object的clone方法表面看对象是不共享信息的，但是如果对象包含子对象的引用，拷贝域就会得到相同子对象的另一个引用，这样一样，原对象和克隆的对象仍然会共享一些信息。（这相当于浅拷贝）

Object的默认克隆操作是“浅拷贝”，并没有克隆对象中引用的其他对象（图6-2）。一下两种情况浅拷贝是安全的：
    1）如果原对象和浅克隆对象共享的子对象是不可变的，那么这种共享就是安全的。如String对象属于一个不可变的类。
    2）或者在生命周期中，子对象一直包含不变的对象，没有更改器方法会改变他，也没方法会生成它的引用，这种情况下也是同样安全的。

通常子对象都是可变的，必须重新定义clone方法来建立一个深拷贝，同时克隆所有子对象。
对于每一个类，需要确定：
    1）默认的clone方法是否满足要求；
    2）是否在可变的子对象上调用clone来修补默认的clone方法
    3）是否不该使用clone
实际上第3个选项是默认选项。如果选择第1项或第2项，类必须：
    1）实现cloneable接口；
    2）重新定义clone方法，并指定public访问修饰符。（受保护访问的规则比较奇妙，子类只能调用受保护的clone方法来克隆他自己的对象。）！！！

注：Cloneable接口是java提供的一组标记接口（tagging interface）之一。（也称为标记接口（marker interface））？？？？建议你自己的程序中不要使用标记接口。

即使clone的默认浅拷贝实现能够满足需求，还是需要实现Cloneable接口，将clone重新定义为public，再调用super.clone

3. lambda表达式
java中的一种lambda表达式形式：

参数 -> 表达式

例如(这里的表达式是一个代码块，可以不需要实现类就可以使用的代码块)：
    (String first, String second) ->
    {
        if (first.lengh() < second.length()) return -1;
        else if (first.length() > second.length()) return 1;
        else return 0;
    }

即使lambda表达式没有参数，仍然需要提供空括号，就像无参数方法一样。无需指定lambda表达式的返回类型，返回类型总是会由上下文推到得出。

    ()->{for(int i=100;i>=0;i--) sout(i);}

3.3 lambda表达式与接口是兼容的。对于只有一个抽象方法的接口，需要这种接口的对象时，就可以提供一个lambda表达式，这种接口称为函数式接口（functional interface）
例如Arrays.sort方法，它的第二个参数需要一个comparator实例，Comparator就是只有一个方法的接口，所以可以提供一个lambda表达式：
    Arrays.sort(words, (first, second)->first.length()-second.length());

注意不能把lambda表达式赋给Object的变量，Object不是一个函数式接口。
另外，Java API在java.util.function包中定义了很多非常通用的函数式接口。

3.4方法引用
在lambda表达式中：
    x->System.out.println(x)                   ||            (x,y) -> Math.pow(x,y)
等价于
    System.out::println                        ||            Math::pow
这里上面一行是lambda表达式，下面等价是方法引用（method reference）。方法引用有三种情况：
    object::instanceMethod
    Class::staticMethod
    Class::instanceMethod
前两种等价于lambda表达式。如上例。对于第三种情况，第一个参数会变成方法的目标。例如
String::compareToIgnoreCase == (x,y)->x.compareToIgnoreCase(y)

另外还有this::method  super::instanceMethod 的方法引用

3.5构造器引用
构造器引用与方法引用很类似，只不过方法名为new。例如，Person::new是Person构造器的一个引用
可以用数组类型建立构造器引用。例如， int[]::new是一个构造器引用，他有一个参数即数组的长度。这等价于 x->new int[x]
（这部分和上面的方法引用 不是很懂）

3.6变量作用域
lambda表达式有三个部分：
    1）一个代码块
    2）参数
    3）自由变量的值，这里指非参数而且不在代码中定义的变量

关于代码块以及自由变量值有一个术语：闭包（closure）
这里有一规则：lambda表达式中捕获的变量必须实际上是最终变量（effectively final）。实际上的最终变量是指，这个变量初始化之后就不会再为它赋新值。
另外在方法中 不能有两个同名的局部变量，因此，lambda表达式中同样也不能有同名的局部变量。


3.7处理lambda表达式
当学习了如何生成lambda表达式，以及如何把一个lambda表达式传递到需要一个函数接口的方法。下面看如何编写方法处理lambda表达式。
使用lambda表达式的重点是延迟执行（deferred execution）。延迟执行的原因有很多，如：
    在一个单独的线程中运行代码；
    多次运行代码；
    在算法的适当位置运行代码（例如，排序中的比较操作）；
    发生某种情况时执行代码（如，点击了一个按钮，数据到达等等）
    只在必要时才运行代码。

要接受一个lambda表达式，需要选择（偶尔可能需要提供）一个函数式接口。表6-1列出了Java API中提供的最重要的函数式接口。

这部分还是无法理解的，我以为lambda表达式可能是Python的一样，现在看来远比Python的lambda表达式复杂。这里等看完Core_Java_Volume_II 在回来说吧

3.8再谈Comparator
略

4内部类
内部类（inner class）是定义在另一个类中的类。使用内部类的原因：
    1.内部类方法可以访问该类定义所在的作用域中的数据，包括私有数据。
    2.内部类可以对同一个包中的其他类隐藏起来。
    3.当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous）内部类比较便捷。

C++有嵌套类。一个被嵌套的类包含在外围类的作用域内。嵌套类是一种类之间的关系，不是对象之间的关系。嵌套类有两个好处：命名控制和访问控制。
对于一个私有内部类，该类对于其他的代码均不可见，因此该类的数据域可设计为公有的，依然是安全的。这些数据域中的数据只能被外围类中的方法访问。在java中只有内部类可以实现这样的控制。
java内部类比C++的嵌套类更丰富在：内部类的对象有一个隐式引用，它引用了实例化该内部对象的外围类对象。通过这个指针，可以访问外围类对象的全部状态。

4.1 使用内部类访问对象状态
    内部类使用外围类的数据时，相当于内部类存在一个指针指向外围类的对象，然后外围类可以通过这个“指针”（外围类引用的正规语法叫OuterClass.this，OuterClass是外围类的名称），来获取外围类对象的数据。
    另外虽然存在内部类，这并不意味着每个外围类都有一个内部类的实例域。（看例子_innClass_.InnerClassTest.java）

4.2内部类的特殊语法规则
(在内部类内部)使用外围类引用的正规语法表达式为：
    OuterClass.this
反过来，（不再内部类内部）可以采用下列语法格式更加明确地编写内部对象的构造器：
    outerObject.new InnerClass(construction parameters)
其中这里的outerObject可以是this也可以是某个具体的对象，例如：
    ActionListener listener = this.new TimePrinter();

注意：内部类中声明的所有静态域都必须是final。因为我们希望一个静态域只有一个实例，不过对于每个外部对象，会分别有一个单步的内部类实例。如果这个域不是final，它可能就不是唯一的。
    另外，内部类不能有static方法。

4.3内部类是否有用，必要和安全
    内部类是一种编译器现象，与虚拟机无关。编译器将会把内部类翻译成$分隔外部类名与内部类名的常规类文件，而虚拟机对此一无所知。
    通过反射getDeclaredxxx找到了编译器添加的final TalkingClock this$0 但是没看到static boolean access$0(TalkingClock)
    这部分还是有点问题，但是这次先跳过了以后有机会回来再看看。
    总而言之，如果内部类访问了私有数据域，就有可能通过附加在外围类所在包中的其他类访问它们。

4.4 局部内部类
    对于只在某个方法中使用过的类，可以直接在这个方法中定义局部类。如上面的TimePrinter类只有start方法用过。
    局部类不能用public或private访问说明符进行声明。它的作用域被限定在声明这个局部类的块中。
    局部类有一个优势，即对外部世界可以完全的隐藏起来。即使TalkingClock类中的其他代码也不能访问它。除了start方法，没任何方法指导TimePrinter的存在。

4.5由外部方法访问变量
    与其他内部类相比较，局部类还有一个优点。它们不仅能够访问包含它们的外部类，还可以访问局部变量。不过，那些局部变量必须事实上为final。这说明它们一旦赋值就不会改变。以下代表明显少了public class 的public，并且在start中添加了参数，且beep是final！
    public void start(int interval, final boolean  beep){
        class TimerPrinter implements ActionListener{
            public void actionPerformed(ActionEvent event){
                System.out.println("At the tone, the time is " + new Date());
                if(beep) Toolkit.getDefaultToolkit().beep();  // beep 是TalkingClock.this.beep的简写
            }
        }
        ActionListener listener = this.new TimerPrinter();
        Timer t = new Timer(interval, listener);
        t.start();
    }

    分析上面代码的控制流程：
    1）调用start()方法
    2）调用内部类TimePrinter的构造器，以便初始化对象变量listener。
    3）将listener引用传递给Timer构造器，定时器开始计时，start方法结束。此时start方法的beep参数变量不复存在。
    4）然后actionPerformed方法执行if beep
    为了能够让actionPerformed方法工作TimePrinter类在beep域释放之前将beep域用start方法的局部变量进行了备份。

    上面讲了局部类的方法只能引用定义为final的局部变量。这显然是不大方便的，如果想要在一个封闭作用域内计数，则只能使用一个长度为1的数组来补救。

补充：
    1.final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象
    2.final类：表明这个类不能被继承。final类中的所有成员方法都会被隐式地指定为final方法。
    3.final方法：类中所有的private方法都隐式地指定为final。使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。

    1.static变量：被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享，可以并且建议通过类名调用。被static 声明的成员变量属于静态成员变量，静态变量 存放在 Java 内存区域的方法区。调用格式：类名.静态变量名
    2.static方法：被static修饰，所以方法属于类，所以不能直接调用非静态变量但是可以通过对象来实现非静态变量，同时可以直接调用静态变量。类名.静态方法名()
    以上两者都属于类成员
    3.静态代码块：静态代码块定义在类中方法外, 静态代码块在非静态代码块之前执行(静态代码块—>非静态代码块—>构造方法)。 该类不管创建多少对象，静态代码块只执行一次。 我个人感觉静态代码块就是把
    4.静态内部类：（static修饰类的话只能修饰内部类）： 静态内部类与非静态内部类之间存在一个最大的区别: 非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围类，但是静态内部类却没有。没有这个引用就意味着：1. 它的创建是不需要依赖外围类的创建。2. 它不能使用任何外围类的非static成员变量和方法。
    5.静态导包(用来导入类中的静态资源，1.5之后的新特性): 格式为：import static 这两个关键字连用可以指定导入某个类中的指定静态资源，并且不需要使用类名调用类中静态成员，可以直接使用类中静态成员变量和成员方法。
    6.静态绑定：使用关键词 private,static,final方法或者构造器.在程序运行前就已经知道方法是属于那个类的，在编译的时候就可以连接到类的中，定位到这个方法。动态绑定（后期绑定）是指：在程序运行过程中，根据具体的实例对象才能具体确定是哪个方法。动态绑定是多态性得以实现的重要因素

4.6匿名内部类
    将局部内部类的使用在深入一步，。假如只创建这个类的一个对象，就不必命名了。这种类被称为匿名内部类（anonymous inner class）。
    public void start(int interval, boolean beep){
        ActionListener listener = new ActionListener()
        {
            public void actionPerformed(ActionEvent event)
            {
                System.out.println("At the tone, the time is" + new Date());
                if(beep) Toolkit.getDefaultToolkit().beep();
            }
        };
        Timer t = new Timer(interval, listener);
        t.start()
    }
    上述代码的含义是：创建一个实现ActionListener接口的类的新对象。需要实现的方法actionPerformed定义在括号{}内。 注意这个分号在括号后面，比较像一个结构体。
    new SuperType(construction parameters)
    {
        inner class methods and data
    }
    SuperType可以是一个接口，于是内部类就要实现这个接口。它也可以是个类，于是内部类就需要扩展他。
    由于构造器名字必须与类名相同，而匿名类没有类名，所以匿名类不能有构造器。取而代之的是，将构造器参数传递给超类（superclass）构造器。尤其是在内部类实现接口的时候，不能有任何构造参数。不仅如此，还要提供一组括号。
    如果构造参数的闭小括号后面根一个开大括号，正在定义的就是匿名内部类。
    多年来，java程序员习惯做法是用匿名内部类实现监听器和其他回调。如今最好还是使用lambda表达式

关于匿名内部类用法，有一个技巧叫"双括号初始化" 书本255页。
    invite(new ArrayList<String>(){{add("Harry");add("Tony")}});

4.7 静态内部类
    有时候，使用内部类只是为了把一个类隐藏在另外一个类的内部，并不需要内部类引用外围类对象。因此，可以把内部类声明为static，以便去下产生的引用。与常规内部类不同，静态内部类可以有静态域和方法。
    比如当某个方法需要返回多个类型的变量时候（这在Python可以直接使用的），但是java需要新定义一个类用来包含这些返回变量。这个时候就可以使用静态内部类。
    这个静态内部类的例子感觉很牵强，为什么不能直接使用数组代表多个类别呢？关于静态内部类和数组的关系，有待思考

内部类总结：
    内部类：属于这个类。
    局部内部类：放在某个内的具体某个方法中。
    匿名内部类：只创建这个内部类的一个对象。这个对象是某个结构实现类的对象，也可以说是一个类的扩展类。
    静态内部类：没有看懂定位

5. 代理
是spring中AOP的一个基础。这里做个基本了解吧
利用代理可以在运行时创建一个实现了一组给定接口的新类。这种功能只有在编译时无法确定需要实现哪个接口时才有必要使用。
5.1何时使用代理
    假设有一个表述接口的Class对象（有可能只包含一个接口），它的确切类型在编译时无法知道。要想构造一个实现这些接口的类，就需要使用newInstance方法或反射找出这个类的构造器。但是，不能实例化一个接口，需要在程序处于运行状态时定义一个新类。



