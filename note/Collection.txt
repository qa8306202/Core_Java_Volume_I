集合
1.java集合框架
1.1 将集合的接口与实现分离
    java集合类库也将接口（interface）和实现（implementation）分离。下面以队列（queue）为例。
    队列接口指出可以在队列的尾部添加元素，在队列的头部删除元素，并可查找队列中元素的个数。当需要手机对象，并按照“先进先出”的规则检索对象时就应该使用队列。以下就是java11中队列的接口：

    //<E> the type of elements held in this queue
    public interface Queue<E> extends Collection<E>
        boolean add(E e);
        boolean offer(E e);
        E remove();
        E poll();
        E element();
        E peek();
    }

    注意上面的queue接口是继承了collection接口的，在collection接口中还有 int size()之类的方法。这个接口并没有说明队列是如何实现的，队列通常有两种实现方式，一种是使用循环数组(ArrayDeque类)，另一种是使用链表（LinkedList类。
    public class ArrayDeque<E> extends AbstractCollection<E>
                               implements Deque<E>, Cloneable, Serializable

    public class LinkedList<E>
        extends AbstractSequentialList<E>
        implements List<E>, Deque<E>, Cloneable, java.io.Serializable
    注意上述这两个实现的接口都是Deque<E>，这个接口继承于Queue。当在程序中使用队列时，一旦构建了集合就不需要知道究竟使用了那种实现。如果想实现自己的类库，比如就会发现以Abstract开头的类。扩展的AbstractQueue类要比实现Queue接口中的方法轻松的多。

1.2.Collection接口
    在java类库中，集合类的基本接口是Collection接口。这个接口有两个基本方法：
    public interface Collection<E>{
        boolean add(E e);
        Iterator<E> iterator();
        ...
    }
    add方法是用于添加元素，如果添加元素确实改变了集合则返回true，如果集合没有发生变化则返回false。iterator方法用于返回一个实现了Iterator接口的对象。可以使用这个迭代器访问集合中的元素。

1.3. 迭代器
Iterator接口包含4个方法：
    public interface iterator<E>{
        E next();
        boolean hasNext();
        void remove();
        default void forEachRemaining(Consumer<? super E>action);
    }

    public interface Iterable<T> {
        Iterator<T> iterator();
        default void forEach(Consumer<? super T> action){...}
        default Spliterator<T> spliterator(){...}
    }

    其中Consumer是一个@FunctionalInterface的接口。Iterable是接口，Iterable是1.5引入的新特性，Iterator是1.2就有了，二者都是为了迭代造作，Iterable只是包装了Iterator,从而允许实现此接口的对象成为for each语句的目标，而且这样的话，更方便以后的扩展。
    而Collection接口又扩展了Iterable接口。因此，对于标准类库中的任何集合都可以使用"for each"循环。
    另外iterator提供的接口forEachRemaining可以不用写循环而直接使用lambda表达式即可。将对迭代器的每一个元素调用这个lambda比到手，直到再没元素为止。可以对迭代器使用lambda表达式~！首先获得集合对象的迭代器，然后用下面方法做lambda。
        iterator.forEachRemaining(element -> do something with element);

    元素的方法类型取决于集合类型。如果对ArrayList进行迭代，迭代器将从索引0开始，每迭代一次，索引值加1。然而对HashSet中的元素，每个元素将会按照某种随机的次序出现。
    java的迭代器与C++的STL是不一样的。C++的STL中的迭代器是根据数组索引建模的。而JAV迭代器查找操作与位置变更是紧密相连的。查找一个元素的唯一方法是调用next，而在执行查找操作的同时，迭代器的位置随之向前移动。因此，应该将java迭代器认为是位于两个元素之间，当调用next时，迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。
    另外，iterator.next与InStream.read看作为等效的。从数据流中读取一个字节，就会自动地“消耗掉”这个字节。 我觉得java的迭代像pop,而c++的是索引。
    这样java删除一个元素就必须将next和remove一起调用，两者具有相互依赖性。
        Iterator<String> it = c.iterator();
        it.next(); //越过第一个元素
        it.remove(); // 删除这个元素

1.4. 泛型实用方法
    Collection接口声明了很多有用的方法，所有的实现类都必须提供这些方法。当然，如果实现Collection接口的每一个类都要提供如此多的例行方法将是一件烦人的事情。为了能够让实现者更容易地实现这个接口，java类库提供了一个类AbstractCollection，它将出方法size和iterator抽象化了，但在此提供了例行方法。此时，一个具体的集合类可以扩展AbstractCollection类了。
    对于java SE8，这种方法已经过时了。如果这些方法是Collection接口的默认方法会更好。但实际上不是这样，不过确实已经增加了很多默认方法。其中大部分都和流处理有关。另外，还有一个很有用的方法（用于删除满足某个条件的元素）：
        default boolean removeIf(Predicate<? super E>filter)

1.5. 集合框架中的接口
Iterable<-- Collection<---List
                      <---Set   <---SortedSet<---NavigableSet
                      <---Queue <---Deque

            Map       <---SortedMap          <---NavigableMap
            Iterator  <---ListIterator
            RandomAccess
集合有两个基本的接口，Collection和Map。一般使用add插入元素，put插入键值对。
List
是一个有序集合（ordered collection）。元素会增加到容器中的特定位置。可以采用两种方式访问元素：使用你迭代器或者使用一个整数索引来访问。后一种方法称为随机访问，因此这样可以按任意顺序访问元素。实际上有两种有序集合，其性能开销有很大差异。由数组支持的有序集合可以快速访问，因此适合使用list方法并提供一个整数索引来访问。与之不同，链表尽管也是有序的，但是随机访问很慢，所以最好使用迭代器来遍历。

set
接口等同于Collection接口，不过其方法的行为有更严谨的定义。集（set）的add方法不允许增加相同的元素。要适当地定义集的equals方法：只要两个集包含同样的元素就认为是相等的，而不要求这些元素有相同的顺序。hashCode方法的定义要保证包含相同元素的两个集会得到相同的散列码。

2.具体的集合
java库中的具体集合
集合类型                描述
ArrayList           一种可以动态增长和缩减的索引序列
LinkedList          一种可以在任何位置进行高效地插入和删除操作的有序序列
ArrayDeque          一种用循环数组实现的双端队列
HashSet             一种没有重复元素的无序集合
TreeSet             一种有序集
EnumSet             一种包含枚举类型值的集
LinkedHashSet       一种可以记住元素插入次序的集
PriorityQueue       一种允许高效删除最小元素的集合
HashMap             一种存储键值关联的数据结构
TreeMap             一种键值有序排列的映射表
EnumMap             一种键值属于枚举类型的映射表
LinkedHashMap       一种可以记住键值项添加次序的映射表
WeakHashMap         一种其值无用武之地后可以被垃圾回收器回收的映射表
IdentityHashMap     一种用==而不是用equals比较键值的映射表

AbstractCollection<--AbstractList       <--AbstractSequentialList(LinkedList) + ArrayList
                  <--AbstractSet        <--HashSet(LinkedHashSet) + EnumSet + TreeSet
                  <--AbstractQueue      <--PriorityQueue + ArrayQueue

AbstracMap        <--HashMap            <--LinkedMap
                  <--TreeMap
                  <--EnumMap
                  <--WeakHashMap
                  <--IdentityHashMap
2.1 链表List
    List是一个接口，他用于描述一个有序集合。
    虽然经常使用数组和ArrayList类，然而数组和数组列表都有一个重大的缺陷————从数组的中间位置删除一个元素要付出很大的代价。其原因是数组中处理被删除元素知乎的所有元素都要向数组的前端移动。想数组中插入也是这样的。
    而链表解决了这个问题。在Java中，所有链表实际上都是双向链接的（double linked）————即每个节点还存放着指向前驱节点的引用。
    但是，链表和泛型集合之间有一个重要的区别。链表是一个有序集合（ordered collection），每个对象的位置十分重要。LinkedList方法将对象添加到链表尾部。但常常需要将元素添加到链表的中间。由于迭代器是描述集合中位置的，所以这种依赖于位置的add方法将由迭代器负责。而对于集合中元素完全无序的类型，如set类型，迭代器中就没有add方法，因为没有意义。

    有序集合（list）和无需集合（set）的区别在于：迭代器是否有add方法。另外，add依赖于迭代器的位置，而remove方法依赖于迭代器的状态，这句话的意思是迭代器调用next+remove会删除左边的元素，迭代器调用previous+remove则会删除右边的元素，另外迭代器不能连续调用两次remove。
    另外，set方法用一个新元素取代调用next或previous方法返回的上一个元素。
    可以使用LinkedList类从前后两个方向遍历链表中的元素，并可以添加、删除元素。

    同一个集合多个迭代器的问题：
    如果一个迭代器发现它的集合被另外一个迭代器修改了，或是被该集合自身的方法修改了，就会抛出一个ConcurrentModificationException。
    为了避免发生异常，一般遵循以下规则：可以根据需要给容器附加许多的迭代器，但是这些迭代器只能只能读取列表。另外，再单独附加一个技能读又能写的迭代器。
    有一种简单的方法可以检测到并发修改的问题。集合可以跟踪改写做出的次数。每个迭代器都维护一个独立的计算值。在每个迭代器方法的开始处检查自己改写操作的计数值是否与集合的改写操作计数值一致。如果不一致则抛出异常。


2.2 数据列表
    Collection类库提供了ArrayList类，这个类也实现了List接口。ArrayList封装了一个动态再分配的对象数组。
    在需要动态数组的时候， 可能会考虑vector类。但是vector类的所有方法都是同步的。可以由两个线程安全地访问一个vector对象。但如果是一个线程访问vector类，代码需要在同步上耗费大量的时间。这个时候建议使用不是同步的ArrayList类。
    注：ArrayList是自动扩容的Arrays。有add().remove()这样的方法。ArrayList容量可以动态增长，但牺牲效率；Array([])高效，但是容量固定无法改变。
    List是接口，ArrayList是用一个数组实现的List类。而LinkedList也是List接口的一个实现类，两者实现的接口区别在于：ArrayList实现了接口RandomAccess;LinkedList实现了接口Deque。继承方面，ArrayList是直接继承的AbstractList而LinkedList则是继承的AbstractList的子类AbstractSequentialList。
    如果需要对集合进行随机方法，就使用数组或ArrayList,而为了尽可能地减少在列表中插入或删除元素付出的代价，则可以使用链表。

2.3 散列集
    链表和数组可以按照人们的意愿排列元素的次序。但是，如果想要查看某个指定的元素，却又忘记了它的位置，就需要访问所有元素，直到找到为止。而hash table可以快速的查找所需的对象。如果自定义类，就要负责实现这个类的hashCode方法。自己实现的hashCode方法应该与equals方法兼容。
    哈希函数最主要的问题是要解决哈希冲突，解决哈希冲突的方法有两种：链接法（chaining），开放寻址法（open addressing）和再散列法
    而哈希函数主要有除法散列，乘法散列和全局散列法三种。
    现在最重要的问题是hash code要能够快速地计算出来，并且这个计算只与要散列的对象状态有关，与散列表中的其他对象无关。在java中，散列表用链表数组实现。每个列表被称为桶（bucket）。要想查找表中对象的位置，就要先计算它的散列码，然后与桶的总数取余，所得到的结果就是保存这个元素的桶的索引。
    在java SE8中，桶满时会从链表变为平衡二叉树。如果选择的散列函数不当，会产生很多冲突，或者如果有恶意代码试图在散列表中填充多个有相同散列码的值，这样就能提高性能。
    关于桶数的设置（知道总元素数）：1.设置为元素个数的75%~150%；2.设置素数（防止）。
    如果总元素数不知道，在表太满时就需要再散列。其中装填因子（load factor）决定何时对散列表进行再散列。如果装填因子为0.75（default），而表中超过75%的位置已经填入元素，这个表就会用双倍的桶数自动地进行再散列。
    HashSet类，它实现了基于散列表的集。可以用add方法添加元素。contains方法已经被重新定义，用来快速地查看某个元素已经出现在集中。
2.4 树集
    TreeSet类与散列集十分类似，不过，它比散列集有所改进。树集是一个有序集合（sorted collection）。可以以任意顺序将元素插入到集合中。在对集合进行遍历时，每个值将自动地按照排序后的顺序呈现。
    正如TreeSet类名所示，排序是用树结构完成的,当前实现使用的是黑红树（red-black tree）。每次将一个元素添加到树中，被放置在正确的排序位置上。因此，迭代器综述以排好序的顺序访问每个元素。
    将一个元素添加到树中要比添加到散列表中慢，但是，与检查数组或链表中的重复元素相比还是快很多。如果树中包含n个元素，查找新元素的争取位置平均需要log2 n 次比较。
    另外，要使用树集，必须能够比较元素。这些元素必须实现了Comparable接口，或者构造集时必须提供一个Comparator。
    表面上看，树集比散列集似乎好很多，但是树集的缺点是树的排序必须是全序的！

2.5 队列与双端队列
    队列可以让人民有效地在尾部添加一个元素，在头部删除一个元素。有两个端头的队列，即双端队列，可以让人们有效地在头部和尾部同时添加或删除火元素。 Queue\Deque是接口，ArrayDeque是实现类。
    public class ArrayDeque<E> extends AbstractCollection<E>
                               implements Deque<E>, Cloneable, Serializable

2.6 优先级队列（priority queue）————使用了堆heap结构的队列
    优先级队列中的元素可以按照任意的顺序插入，却总是按照排序的顺序进行检索。也就是说，无论何时调用remove方法，总会获得当前优先级队友中最小的元素。然而，优先级队列并没有对所有元素进行排序。如果用迭代的方式处理这些元素，并不需要对他们进行排序。优先级队列使用的数据结构称为堆。
    和TreeSet一样，一个优先级队列既可以保存实现了Comparable接口的类对象，也可以保存在构造器中提供的Comparator对象。
    而使用优先级队列的典型事例是任务调度。每个任务有一个优先级，任务以随机顺序添加到队列中。每当启动一个新的任务时，都将优先级最高的任务从队列中删除。


3. 映射
    set是一个集合，它可以快速地查找现有的元素。映射（map）用来存放键值对。
3.1基本映射操作
    Java类库为映射提供了两个通用的实现：HashMap和TreeMap。这两个类都实现了Map接口。
    散列映射对键进行散列，树映射用键的整体顺序对元素进行排序，并将其组织成搜索树。 散列或比较函数只能用于键。与键相关的值不能进行散列或比较。
    要迭代处理映射的键和值，最容易的方法是使用forEach方法。可以提供一个接受键和值的lambda表达式。映射中的每一项会依次调用这个表达式。
    scores.forEach((k,v)->
        System.out.println("key="+k+",value"+v));

3.2 更新映射项
    处理映射时的一个难点就是更新映射项。正常情况下，可以得到与一个键关联的原值，完成更新，再放回更新后的值。不过，必须考虑一个特殊情况，即键第一次出现。以单词计数器为例：
    counts.put(word,counts.get(word)+1)
    但是第一次看到这个word则会返回Null，因此会出现一个NullPointerException异常。这里可以使用getOrDefault(word,0)方法。或者调用putIfAbsent()方法：
    counts.putIAbsent(word,0);
    counts.put(word,counts(word)+1);

    最好的方法是使用merge方法。如果键原来不存在，下面的调用：
    counts.merge(word,1,Interger::sum);
    将word与1关联，否则使用Interger::sum函数组合原值和1（也就是将原值与1求和）。

3.3 映射视图
    集合框架不认为映射本身是一个集合。而其他数据结构认为映射是一个键值对集合，或者由键索引的值集合。
    可以得到映射的视图（view）————这是实现了Collection接口或者某个子接口的对象。

    有三种视图：键集、值集合（不是一个集）以及键值对集。键和键值对可以构成一个集，因为映射中一个键只能有一个副本。下面的方法：
    Set<K> keySet();
    Collection<V> values();
    Set<Map.Entry<K,V>> entrySet();  //前面是返回类型
    会分别返回这3个视图。（条目集的元素是实现Map.Entry接口的类的对象。）
    需要说明的是keySet不是HashSet或TreeSet，而是实现了Set接口的另外某个类的对象。Set接口扩展了Collection接口。如果想同时查看键值，可以通过枚举条目来避免查找值：
    for(Map.Entry<String, Employee>entry: staff.entrySet()){}

    如果在键集视图上调用迭代器的remove方法，实际上会从映射中删除这个键和他相关的值。不过，不能向键集视图增加元素。

3.4. 弱散列映射WeakHashMap
    设计WeakHashMap类是为了解决一个有趣的问题。如果一个值，对应的键已经不再使用了，将会出现什么情况？假定对某个键的最后一次引用已经消亡，不再有任何途径引用这个值的对象了。但是，由于在程序中的任何部分没有再没有出现这个键，所以这个键值对无法从映射中删除。为什么垃圾回收器不能够删除他？难道删除无用的对象不是垃圾回收器的工作吗？
    遗憾的是，事情没有这样简单。垃圾回收器跟踪活动的对象。只要映射对象是活动的，其中的所有桶也都活动的，它们不能被回收。因此，需要由程序负责从长期活动的映射表中删除那些无用的值。或者使用weakHashMap完成这件事情。当对键的唯一引用来自散列条目时，这一数据结构将垃圾回收器协同工作一起删除键值对。
    下面是这种机制的内部运行情况。WeakHashMap使用弱引用（weak reference）保存键。WeakReference对象将引用保存到另外一个对象中，在这里，就是散列键。对于这种类型的对象，来及回收器用一种特有的方式进行处理。通常，如果垃圾回收器发现某个特定的对象已经没有他人引用了，就将其收回。

3.5 链接散列集与映射（不会）
    LinkedHashSet和LinkedHashMap类用来记住插入元素项的顺序。这样就可以避免在散列表中的项从表面上是随机排列的。当entry插入到表中，就会并入到双向链表中。
    链接散列映射将用访问顺序，而不是插入顺序，对映射条目进行迭代。每次调用get或普通，受到影响的条目将从当前的位置删除，并放到条目链表的尾部（只有条目在链表中的位置会受到影响，而散列表中的桶不会受到影响。）

3.6. 枚举集与映射（不会）
    EnumSet是一个枚举类型元素集的高效实现。由于枚举类型只有有限个实例，所以EnumSet内部用位序列实现。如果对应的值在集中，则相应的位被置为1。
    EnumSet类没有公共的构造器。可以使用静态工厂方法构造这个集：
    可以使用Set接口的常用方法来修改EnumSet。

3.7. 标识散列映射
    类IdentityHashMap有特殊作用。在这个类中，键的散列值不是用hashCode函数计算的，而是用System.identityHashCode方法计算的。这是Object.hashCode方法根据对象的内存地址来计算散列码时所使用的方法。而且，在两个对象进行比较的时，IdentityHashMap使用==而非equals。
    也就是说，不同的键对象，即使内容相同，也被视为不同的对象。在实现对象变量算法（如对象串行化）时，这个类非常有用，可以用来跟踪每个对象的遍历状况。

以上关于映射，包括常用的HashMap和TreeMap,另外还有（SortedMap,）WeakHashMap,LinkedHashMap,EnumMap,IdentityHashMap这些类。

9.4 视图与包装器
    通过使用视图（views）可以获得其他的实现了Collection接口和Map接口的对象。映射类的keySet方法就是一个这样的示例。
    KeySet方法返回一个实现了Set接口的类对象，这个类的方法对原映射进行操作。这种集合称为视图（views）。
    视图技术在集框架中有许多非常有用的应用。【大概就是Python中numpy的意思吧?】

9.4.1 轻量级集合包装器
    Arrays类的静态方法asList将返回一个包装了普通java数组的List包装器。这个方法可以将数组传递给一个期望得到列表或集合参数的方法。
    e.g.：
    Card[] cardDeck = new Card[52];
    ...
    List<Card> cardList = Arrays.asList(cardDeck);
    返回的对象不是一个ArrayList。它是一个视图对象，带有访问底层数组的get和set方法。改变数组大小的所有方法（e.g. 与迭代器相关的add和remove方法）都会抛出一个UnsupportedOperationException异常。大概就是说，他只能看（view）不能改？
    asList方法可以接收可变数目的参数。例如：
    List<String> names = Arrays.toList("Amy","Bob","Carl");
    这个方法调用 Collections.nCopies(n,anObject) 将返回一个实现了List接口的不可修改的对象，并给人一种包含n个元素，每个元素都像是一个anObject的错觉。

    注释：Collections类包含很多实用方法，这些方法的参数和返回值都是集合。不要将它与Collection接口混淆！！

    如果调用方法Collections.singleton(anObject)
    则将返回一个视图对象。这个对象实现了Set接口（与产生List的ncopies方法不同）。返回的对象实现了一个不可修改的单元素集合，而不需要付出建立数据结构的开销。singletonMap方法类似。
    类似地，对象集合框架中的每一个接口，还有一些方法可以生成空集，列表，映射，等等。特别是，集的类型可以推到得出：
    Set<String> deepThoughts = Collections.emptySet();

9.4.2 子范围【可修改子范围从而影响原集合】
    可以为很多集合建立子范围(subrange)视图。例如，假设有一个列表staff，想从中取出第10个~第19个元素。可以使用subList方法来获得一个列表的子范围视图。
    List group2 = staff.subList(10,20);
    第一个索引号包含在内，第二个索引则不包含在内。这与String类的substring操作中的参数情况相同。可以将任何操作应用于子范围，并且能够自动地反映整个列表的情况。例如，删除整个子范围，然后整个子范围的元素就自动地从原staff列表中删除，并且group2为空。
    group2.clear();
    对于有序集和映射，可以使用排序顺序而不是元素位置建立子范围。SortedSet接口声明了3个方法：
    SortedSet<E> subSet<E from, E to>
    ...

9.4.3. 不可修改的视图
    Collections还有几个方法，用于产生集合的不可修改视图（unmodifiable views）。这些视图对现在集合增加了一个运行时的检查。如果发现试图对集合进行修改，就抛出了一个异常，同时这个集合将保持未修改的状态。可以使用下面8种方法获得不可修改视图：
    Collections.unmodifiableCollection
    Collections.unmodifiableList
    Collections.unmodifiableSet
    Collections.unmodifiableSortedSet
    Collections.unmodifiableNavigableSet
    Collections.unmodifiableMap
    Collections.unmodifiableSortedMap
    Collections.unmodifiableNavigableMap
    每个方法都定义于一个接口。例如Collections.unmodifiableList与ArrayList、LinkedList或者任何实现了List接口的其他类一起协同工作。

    不可修改视图并不是集合本身不可修改。仍然可以通过集合的原始引用（在这里是staff）对集合进行修改。并仍然可以让集合的元素调用更改器方法。
    由于视图只是包装了 【接口】 而不是实际的集合对象,所以只能访问接口中定义的方法。例如，LinkedList类有一些非常方便的方法,addFirst和addList，它们都不是List接口的方法，不能通过不可修改视图进行方法。

    注：unmodifiableCollection方法与synchronizedCollection以及checkedCollection方法一样，将返回一个集合，它的equals方法不调用底层集合的equals方法。相反，他继承了Object类的equals方法，这个方法只是检测两个对象是否是同一个对象。如果将set或者List转换为Collection，就再也无法检测器内容是否相同了。

9.4.4 同步视图
    如果由多个线程访问集合，就必须确保集不会被意外地破坏。类库的设计者使用视图机制来确保常规集合的线程安全，而不是实现线程安全的集合类。例如，Collections类的静态synchronizedMap方法可以将任意一个映射表转化成具有同步访问方法的Map：
    Map<String,Employee> map = Collections.synchronizeMap(new HashMap(String,Employee)());

    现在就可以由多线程访问map对象了。像get和put这类方法都是同步操作的，即在另一个线程调用另一个方法之前，刚才的方法必须彻底完成。更多介绍在14章

9.4.5. 受查视图
    “受查”视图用来对泛型类型发送问题时提供调试支持。实际上，将错误类型的元素混入泛型集合中的问题极有可能发生。e.g.：
    ArrayList<String> strings = new ArrayList<>();
    ArrayList rawList = strings; // 这里只有warning没有error
    rawList.add(new Date());  // 这个时候strings中包含了一个Data Object
    这个错误的add命令在运行时检测不到，相反，只有在稍后的另外一个部分代码中调用get方法，并将结果转化为String时，这个类才会抛出异常。
    受查视图可以探测到这类问题。下面定义了一个安全列表：
    List<String>safeStrings = Collections.checkedList(strings, String.class);

9.4.6. 关于可选操作的说明
    略


9.5 算法
    泛型集合接口有一个很大的优点，即算法只需要实现一次。
    因为数组，数组列表，链表可以实现最大元素的代码会有一点差别。可以使用集合接口和泛型编写统一代码。采用get和set方法进行随机访问要比直接迭代层次高。而且这项任务并不需要随机方法（因为需要遍历）。直接用迭代器遍历每个元素就可以计算最大元素。因此，可以将max方法实现为能够接受任何实现了Collection接口的对象。
    public static <T extends Comparable> T max(Collection<T> c){
        if (c.isEmpty) throw new NoSuchElementException();
        Iterator<T> iter = c.iterator();
        T largest = iter.next();
        while(iter.hasNext()){
            T.next = iter.next();
            if(largest.compareTo(next) < 0)
            largest = next;
        }
        return largest;
    }

    现在就可以使用一个方法计算链表，数组队列或数组中最大元素了。

9.5.1. 排序与混排
    Collections类中的sort方法可以对实现了List接口的集合进行排序。
        List<String> staff = new LinkedList<>();
        Collections.sort(staff);
    集合类库中使用的排序算法比快排排序要慢一些，快排是通用排序算法的传统选择。但是，归并有一个主要优点：稳定，即不需要交换相同的元素。
    Collections类有一个算法shuffle，用于shuffle。如果提供的列表没有实现RandomAccess接口，shuffle方法将元素复制到数组中，然后打乱数组元素的顺序，最后再讲打乱顺序后的元素复制回列表。

9.5.2 二分查找
    Collections类的binarySearch方法实现了二分查找算法。注意，集合必须是排好序的，否则算法将返回错误答案。
        i = Collections.binarySearch(c,element);
        i = Collections.binarySearch(c,element, comparator);
    如果binarySearch方法返回的数值大于等于0,则表示匹配对象的索引。如果返回负值，则表示没有匹配的元素。但，可以利用返回值计算应该将element插入到集合的哪个位置，以保持有序性。插入的位置是：
    if (i < 0) insertionPoint = -i - 1

9.5.3 简单算法
    在Collections类中包含了几个简单且很有用的算法。包括min,max,copy,fill(所有位置设为相同值),replaceAll,swap,reverse,rotate,frequency等等。

9.5.4 批操作
    假设希望找出两个集合的交集。首先建立一个新集来存放结果：
        Set<String> result = new HashSet<>(a);
    然后使用集合b限制集合a，即可得到交集:
        result.retrainAll(b)；

    同理可以对视图进行操作。由于键集是Map的一个视图，所以键和相关联的员工会自动从映射中删除。

9.5.5 集合与数组的转换
    传统数组和比较现代的集合之间进行转换。如果需要把一个数组转换为集合，Arrays.asList包装器可以达到这个目的。
        String[] values = ...;
        HashSet<String> staff new HashSet<>(Arrays.asList(values));

    从集合得到数组可能困难一点。可以使用toArray()方法（不会，可能需要再看）：
        Object[] values = staff.toArray();

9.5.6 编写自己的算法
    如果编写自己的算法，应该尽可能地使用接口，而不要使用具体的实现。例如
    void fillMenu(JMenu menu,ArrayList<JMenuItem> items){
        for(JMenuItem item : items)
            menu.add(item);
    }

    改写为：
    void fillMenu(JMenu menu, Collection<JMenuItem> items){
         for(JMenuItem item : items)
             menu.add(item);
    }
9.6 遗留的集合
    包括Hashtable类，枚举，属性映射，栈，位集。（没看）

