泛型程序设计
1.为什么要使用泛型程序设计
    泛型程序设计意味着编写的代码可以被很多不同类型的对象所重用。泛型提供了一个更好的解决方案：类型参数（type parameters）。ArrayList类有一个方法addAll用来添加另一个集合的全部元素。程序员可能想要将ArrayList<Manager>中的所有元素添加到ArrayList<Employee>中去。然而反过来就不行。
    如果只能允许前一个调用，而不能允许后一个调用呢？java设计了通配符类型（wildcard type）来解决这个问题。

2.定义简单泛型类
    一个泛型类（generic class）就是具有一个或多个类型变量的类。以下为例：
    public class Pair<T>{
        private T first;
        private T second;

        public Pair(){first=null;second=null;}
        public Pair(T first, T second){this.first=first;this.second=second;}

        public T getFirst(){return first;}
        public T getSecond(){return second;}

        public void setFirst(T newValue){ first=newValue;}
        public void setSecond(T newValue){second=newValue;}
    }
    以上pair类引入了一个类型变量T，用尖括号<>括起来，并放在类名后面。

    泛型类可以有多个类型变量。例如，可以定义Pair类型，其中第一个域和第二个域使用不同的类型：
    public class Pair<T,U>{...}

    注：类型变量使用大写形式，且比较短，这是很常见的。在java库中，使用变量E表示集合的元素类型，K和V分别表示key和value的类型。T（需要时还可以使用临近的字母U和S）表示“任意类型”。

3.泛型方法
    除了可以定义泛型类，还可以定义一个带有类型参数的简单方法。
    class ArrayAlg{
        public static<T> T getMiddle(T... a){return a[a.length/2];}
    }
    虽然这个方法是在普通类中定义，但他是一个泛型方法。注意，类型变量（这里是指的<T>）是放在修饰符（这里是public static）的后面，返回类型(T)的前面。其他相关看pairTest1.java中的测试样例和注释。

4.类型变量的限定
    有时，类或方法需要对类型变量加以约束。例如：
    class ArrayAlg{
        public static<T> T min(T[] a) // almost correct
        {
            if(a == null | n.length==0) return null;
            T smallest = a[0];
            for(int i=1;i<a.length;i++){
                if(smallest.compareTo(a[i])>0) smallest = a[i];
            }
            return smallest;
        }
    }

    上述这个min方法内部，其中变量smallest类型为T， 这意味他可以是任意一个对象。怎么才能让T所属类有compareTo方法呢？
    解决这个问题的方案是将T限制为实现了CompareTo接口的类型。可以通过对类型变量T设置限定（bound）实现这一点：
    public static <T extends Comparable> T min(T[] a)...
    这个写法是:
       <T extends BoundingType>
    表示T应该是绑定类型的子类型（subtype）。T和绑定类型可以是类，也可以是接口。另外一个变量类型或通配符可以有多个限定，例如：
        T extends Comparable & Serializable
    限定类型用“&”分隔，而逗号用来分隔类型变量。

5. 泛型代码和虚拟机
虚拟机没有泛型类型对象————所有对象都属于普通类。
5.1 类型擦除
    无论何时定义一个泛型类型，都自动提供了一个相应的原始类型（raw type）。原始类型的名字就是删去类型参数后的泛型类型名。擦除(erased)类型变量，并替换为限定类型（无限定的变量用Object）。
    原始类型用第一个限定的类型变量来替换，如果没有给定限定类型就用Object替换。
    在程序中可以包含不同类型的Pair，例如，Pair<String>或Pair<LocalDate>。而擦除类型后就变成原始的Pair类型了。
5.2 翻译泛型表达式
    当程序调用泛型方法时，如果擦除返回类型，编译器插入强制类型转换。例如：
        Pair<Employee>buddies = ...;
        Employee buddy = buddies.getFirst();
    擦除getFirst的返回类型后将返回Object类型。编译器自动插入Employee的强制类型转换，也就是说编译器吧这个方法调用翻译为两条虚拟机指令：
        对原始方法Pair,getFirst的调用
        将返回的Object类型强制转换为Employee类型。
    另外，当存取一个泛型域时也要插入强制类型转换。
5.3 翻译泛型方法
    类型擦除也会出现在泛型方法中。程序员通常认为下述的泛型方法是一个完成的方法族：
        public static <T extends Comparable> T min(T[] a)
    而擦除类型之后，只剩下一个方法：
        public static Comparable min(Comparable[] a)
    这个时候类型参数T已经被擦除了，而留下了限定类型Comparable。

    而方法的擦除带来了两个复杂的问题。例如：
    class DateInterval extends Pair<LocalDate>{
        public void setSecond(LocalDate second){
            if(second.compareTo(getFirst())>=0)
                super.setSecond(second);
        }
        ...
    }
    其中setSecond方法是从pair继承的（类型擦除后，这里的LocalDate变成了Object），即
        public void setSecond(Object second)
    我们知道，Java中函数签名包括函数名，参数数量、顺序和类型，这个地方由LocalDate擦除成了Object实际上是不同的一个方法了。然而不应该不一样。
    这里希望setSecond的调用具有多态性，并调用最合适的那个方法。由于pair引用了DateInterval对象，所以应该调用DateInterval.setSecond。
    ***问题在于类型擦除与多态发生了冲突。***
    要解决这个问题，就需要编译器在DateInterval类中生成一个桥方法（bridge method）：
        public void setSecond(Object Second){setSecond((Date) second);}
    。。。

    总之，需要记住有关java泛型的事实：
    虚拟机中没有泛型，只有普通的类和方法。
    所有的类型参数都用它们的限定类型替换。
    桥方法被合成来保持多态。
    为保持类型安全性，必要时插入强制类型转换。

5.4 调用遗留代码
    设计java泛型类型时，主要目标是允许泛型代码和遗留代码之间能够互操作。
    在查看了警告之后，可以利用注解（annotation）使之消失。注解必须放在生成这个警告的代码所在的方法之前，或者可以标注整个方法。
        @SuppressWarnings("unchecked") // 本来下面的compareTo会出现unchecked的警告，黄色的，如果这里写注解 就没了
        public static <T extends Comparable>Pair<T> minmax(T[] a){
            if(a == null || a.length==0) return null;
            T min = a[0];
            T max = a[0];
            for (int i=1;i<a.length;i++){
                if(min.compareTo(a[i])>0) min = a[i];
                if(max.compareTo(a[i])<0) max = a[i];
            }
            return new Pair<>(min,max);
        }

6. 约束与局限性
6.1 不能用基本类型实例化类型参数
    不能用类型参数代替基本类型。因此，没有Pair<double>,只有Pair<Double>。当然，其原因是类型擦除。擦除之后，Pair类含有Object类型的域，而Object不能存储double值。

6.2 运行时类型查询只适用于原始类型
    虚拟机中的对象总有一个特定的非泛型类型。因此，所有的类型查询只产生原始类型。
    例如：
        if(a instanceof Pair<String>) //error
    实际上仅仅测试a是否是任意类型的一个Pair。下面的测试同样也是错的：
        if(a instanceof Pair<T>) //error
    或者强制转换：
        Pair<String> p = (Pair<String>)a;  // warning--can only test that a is a Pair
    为提醒这一风险，试图查询一个对象是否属于某个泛型类型时，倘若使用instanceof会得到一个编译器错误，如果使用强制类型转换会得到一个警告。
    同样的道理，getClass方法综述返回原始类型。

6.3 不能创建参数化类型的数组
    Pair<String>[] table = new Pair<String>[10]; // error
    因为擦除后，table的类型是Pair[]。可以把他转换为Object[]：
    Object[] objarray = table;
    数组会记住它的元素类型，如果试图存储其他类型的元素，就会抛出一个ArrayStoreException异常：
    objarray[0] = "hello"; // errpr--component type is Pair.
    不过对于泛型类型，擦除会使得这种机制无效。
